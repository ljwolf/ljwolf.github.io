<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on Yet Another Geographer</title>
    <link>/tags/optimization/</link>
    <description>Recent content in Optimization on Yet Another Geographer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 16 Feb 2016 00:09:02 +0000</lastBuildDate>
    
	<atom:link href="/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A bite of a “free lunch” optimizing numerical routines in Python</title>
      <link>/a-bite-of-a-free-lunch-optimizing-numerical/</link>
      <pubDate>Tue, 16 Feb 2016 00:09:02 +0000</pubDate>
      
      <guid>/a-bite-of-a-free-lunch-optimizing-numerical/</guid>
      <description>tl;dr: ask yourself these before you deadlift optimize code
I use Python pretty much daily, but I’m definitely not a Python wizard. Now that I’m done with converting the Python Spatial Analytics Library to use Python 3 compatible idioms, I took a break from refactoring more generally.
But, in doing two small tests/stabs at refactoring for speed &amp;amp; memory usage, I’m reminded why optimizing numerical code is so hard. I’ve heard &amp;ldquo;there ain’t no such thing as a free lunch,” so I’m usually wary about getting into performance optimization stuff, but these two recent instances really drive this point home for me again.</description>
    </item>
    
    <item>
      <title></title>
      <link>/something-about-custom-blue-gamuts-makes-for-a/</link>
      <pubDate>Tue, 29 Apr 2014 23:44:51 +0000</pubDate>
      
      <guid>/something-about-custom-blue-gamuts-makes-for-a/</guid>
      <description>imported from: yetanothergeographer</description>
    </item>
    
    <item>
      <title></title>
      <link>/first-simple-program-in-julia-a-greedy-knapsack/</link>
      <pubDate>Thu, 20 Feb 2014 04:32:52 +0000</pubDate>
      
      <guid>/first-simple-program-in-julia-a-greedy-knapsack/</guid>
      <description>A couple realizations:
1.) Having learned R first, I&amp;rsquo;m continually disappointed when standard arrays don&amp;rsquo;t implement sorting well.
2.) I wanted to implement this using a queue, but apparently those aren&amp;rsquo;t standard elements in Julia&amp;rsquo;s base. And, for some reason, Julia&amp;rsquo;s package/module interface wasn&amp;rsquo;t working. Their explanation is cryptic on how to import functions from modules made out of installed packages, and what the relationship is between modules and packages.</description>
    </item>
    
    <item>
      <title>On Perpsective</title>
      <link>/on-perpsective/</link>
      <pubDate>Mon, 03 Feb 2014 14:00:00 +0000</pubDate>
      
      <guid>/on-perpsective/</guid>
      <description>Trying to express an area of specialization is surprisingly difficult. But, these exercises in perspective-stretching are important to realize the limits to both your knowledge and the knowledge at the frontier of research. When intently focused on the smallest of details about the implementation of an out-of-kilter algorithm, it&amp;rsquo;s easy to forget that, while it&amp;rsquo;s hard to figure out how to implement a stochastic constraint solver in Haskell, there are broader problems.</description>
    </item>
    
  </channel>
</rss>