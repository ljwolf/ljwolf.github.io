<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Studyblr on Yet Another Geographer</title>
    <link>/tags/studyblr/</link>
    <description>Recent content in Studyblr on Yet Another Geographer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 16 Feb 2016 00:09:02 +0000</lastBuildDate>
    
	<atom:link href="/tags/studyblr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A bite of a “free lunch” optimizing numerical routines in Python</title>
      <link>/a-bite-of-a-free-lunch-optimizing-numerical/</link>
      <pubDate>Tue, 16 Feb 2016 00:09:02 +0000</pubDate>
      
      <guid>/a-bite-of-a-free-lunch-optimizing-numerical/</guid>
      <description>tl;dr: ask yourself these before you deadlift optimize code
I use Python pretty much daily, but I’m definitely not a Python wizard. Now that I’m done with converting the Python Spatial Analytics Library to use Python 3 compatible idioms, I took a break from refactoring more generally.
But, in doing two small tests/stabs at refactoring for speed &amp;amp; memory usage, I’m reminded why optimizing numerical code is so hard. I’ve heard &amp;ldquo;there ain’t no such thing as a free lunch,” so I’m usually wary about getting into performance optimization stuff, but these two recent instances really drive this point home for me again.</description>
    </item>
    
    <item>
      <title>one of my favorite diagrams</title>
      <link>/one-of-my-favorite-diagrams-from-micah-altmans/</link>
      <pubDate>Tue, 09 Feb 2016 14:40:39 +0000</pubDate>
      
      <guid>/one-of-my-favorite-diagrams-from-micah-altmans/</guid>
      <description>from micah altman&amp;rsquo;s fantastic dissertation.
 imported from: yetanothergeographer</description>
    </item>
    
  </channel>
</rss>